-- :set -XOverloadedStrings
:set -XTypeFamilies
-- :set -XNoMonomorphismRestriction
-- :load src/Music/Prelude/Standard.hs

:m + Music.Prelude
:def! open  (\x -> return $ "open  $ asScore $ "++ x)
:def! play  (\x -> return $ "play  $ asScore $ "++ x)
:def! display  (\x -> return $ "display $ "++ x)
:def! audify  (\x -> return $ "audify $ "++ x)
:def! da  (\x -> return $ "displayAndAudify $ "++ x)
:def! eval-typefun (\x -> return $ "() :: ("++ x ++ " ~ ()) => ()")
:set editor mate

-- let play x = do
--   writeMidi "test.mid" $ asScore x
--   System.Process.system "timidity test.mid"

:def! play (\x -> return $ "do { writeMidi \"/Users/hans/Desktop/test.mid\" $ asScore $ " ++ x ++ "; System.Process.system \"timidity /Users/hans/Desktop/test.mid 2>/dev/null >/dev/null\" }")

:def! unload (\_ -> return ":m - Music.Prelude")
:set -XNoMonomorphismRestriction
:set -XOverloadedStrings
:set prompt ">>> "

default (Int, Float)

putStrLn "==================================================="
putStrLn "Welcome to the Music Suite!"
putStrLn "Try :open <music> or :play <music>"
putStrLn "==================================================="
